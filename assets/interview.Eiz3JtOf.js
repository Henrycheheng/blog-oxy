import{_ as c}from"./ValaxyMain.vue_vue_type_style_index_0_lang.DDZBihCH.js";import{e as E,a as u,u as g}from"./chunks/vue-router.5oi-MqCx.js";import{N as y,a3 as l,U as a,S as s,W as i,u as m,O as F,E as C}from"./framework.ZXDN0mPO.js";import"./app.MTKPrG9B.js";import"./chunks/dayjs.Byk5cVHE.js";import"./chunks/@vueuse/motion.BwYW2Ryt.js";import"./chunks/vue-i18n.CE3NdIHS.js";import"./chunks/pinia.CSzZVkqh.js";import"./chunks/nprogress.CEV-6qg_.js";/* empty css                    */import"./YunComment.vue_vue_type_style_index_0_lang.D9VVdOdH.js";import"./index.C5okkQwF.js";import"./YunPageHeader.vue_vue_type_script_setup_true_lang.CUe9N4mi.js";import"./post.jei6d4rt.js";const f=E("/posts/react/interview",async e=>JSON.parse('{"title":"记录一次react面试","description":"","frontmatter":{"title":"记录一次react面试","subtitle":"react小记","date":"2023-10-17","updated":"2023-10-17","categories":"react","tags":["react面试"],"top":1,"aplayer":true},"headers":[],"relativePath":"pages/posts/react/interview.md","lastUpdated":1752424871000}'),{lazy:(e,n)=>e.name===n.name}),W={__name:"interview",setup(e,{expose:n}){const{data:k}=f(),o=g(),r=u(),h=Object.assign(r.meta.frontmatter||{},k.value?.frontmatter||{});return o.currentRoute.value.data=k.value,C("valaxy:frontmatter",h),globalThis.$frontmatter=h,n({frontmatter:{title:"记录一次react面试",subtitle:"react小记",date:"2023-10-17",updated:"2023-10-17",categories:"react",tags:["react面试"],top:1,aplayer:!0}}),(t,p)=>{const d=c;return F(),y(d,{frontmatter:m(h)},{"main-content-md":l(()=>p[0]||(p[0]=[s("h4",{id:"_1-setstate是同步还是异步的",tabindex:"-1"},[i("1.setState是同步还是异步的 "),s("a",{class:"header-anchor",href:"#_1-setstate是同步还是异步的","aria-label":'Permalink to "1.setState是同步还是异步的"'},"​")],-1),s("p",null,"在React中，setState通常是异步的。当你调用setState时，React会将状态更新放入队列，然后在稍后的某个时间点才会执行实际的状态更新。这是出于性能和优化的考虑，因为React会批量处理状态更新以最小化DOM操作，从而提高性能。",-1),s("p",null,"这意味着在调用setState之后，你不能立即依赖于状态已经被更新。如果你需要在状态更新后执行某些操作，可以使用setState的第二个参数，它是一个回调函数，会在状态更新完成后被调用，例如：",-1),s("div",{class:"language-javascript"},[s("button",{title:"Copy code",class:"copy"}),s("span",{class:"lang"},"javascript"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[s("code",{"v-pre":""},[s("span",{class:"line"}),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"this"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"setState"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"({ count: "),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"this"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},".state.count "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"+"),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," 1"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," }, () "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"=>"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"  // 在这个回调函数中可以访问到更新后的状态")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  console."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"log"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"this"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},".state.count);")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"});")])])]),s("button",{class:"collapse"})],-1),s("p",null,[i("以下是一些可能导致"),s("code",null,"setState"),i("同步执行的情况：")],-1),s("ol",null,[s("li",null,[s("strong",null,[i("在合成事件处理函数中的"),s("code",null,"setState")]),i("：当"),s("code",null,"setState"),i("被调用时，React通常会将多个"),s("code",null,"setState"),i("调用合并成单个更新，以提高性能。然而，在合成事件处理函数中，React不会进行批量处理，因此"),s("code",null,"setState"),i("可能会同步执行。")])],-1),s("div",{class:"language-javascript"},[s("button",{title:"Copy code",class:"copy"}),s("span",{class:"lang"},"javascript"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[s("code",{"v-pre":""},[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"buttonClickHandler"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"() {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"  this"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"setState"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"({ count: "),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"this"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},".state.count "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"+"),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," 1"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," });")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  console."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"log"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"this"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},".state.count); "),s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// 这里可能是同步的")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])]),s("button",{class:"collapse"})],-1),s("ol",{start:"2"},[s("li",null,[s("strong",null,[s("code",null,"setState"),i("的第二个参数")]),i("："),s("code",null,"setState"),i("的第二个参数是一个回调函数，它会在状态更新完成后被调用。在这个回调函数中，你可以访问到更新后的状态，这是同步的。")])],-1),s("div",{class:"language-javascript"},[s("button",{title:"Copy code",class:"copy"}),s("span",{class:"lang"},"javascript"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[s("code",{"v-pre":""},[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"this"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"setState"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"({ count: "),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"this"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},".state.count "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"+"),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," 1"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," }, () "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"=>"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  console."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"log"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"this"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},".state.count); "),s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// 这里是同步的")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"});")])])]),s("button",{class:"collapse"})],-1),s("p",null,[i("在大多数情况下，你应该将"),s("code",null,"setState"),i("视为异步操作，而且不应该依赖于状态的即时更新。")],-1),s("h4",{id:"_2-函数组件如何执行卸载",tabindex:"-1"},[i("2.函数组件如何执行卸载 "),s("a",{class:"header-anchor",href:"#_2-函数组件如何执行卸载","aria-label":'Permalink to "2.函数组件如何执行卸载"'},"​")],-1),s("p",null,[i("在React中，函数组件卸载的过程是由React自动管理的，无需手动执行。当一个函数组件从DOM中移除时，React会自动触发卸载生命周期方法，主要包括"),s("code",null,"componentWillUnmount"),i("（在React 16.3之前）和"),s("code",null,"useEffect"),i("中的清理函数（在React 16.3及以后）。")],-1),s("p",null,[i("在函数组件中，你可以使用"),s("code",null,"useEffect"),i("来模拟类组件的卸载操作。你可以在"),s("code",null,"useEffect"),i("中返回一个清理函数，它会在组件卸载时执行。例如：")],-1),s("div",{class:"language-javascript"},[s("button",{title:"Copy code",class:"copy"}),s("span",{class:"lang"},"javascript"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[s("code",{"v-pre":""},[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," React, { useEffect } "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"from"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," 'react'"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},";")]),i(`
`),s("span",{class:"line"}),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"function"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," MyComponent"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"() {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"  // 在这里定义副作用")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"  useEffect"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(() "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"=>"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"    // 执行一些操作")]),i(`
`),s("span",{class:"line"}),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"    // 返回一个清理函数，会在组件卸载时执行")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"    return"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," () "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"=>"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"      // 执行卸载时需要的清理操作")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    };")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  }, []); "),s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// 空数组作为第二个参数表示只在组件挂载和卸载时执行")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])]),s("button",{class:"collapse"})],-1),s("p",null,"当函数组件被卸载时，React会自动调用这个清理函数，你可以在这里进行一些资源释放或取消订阅等操作。这是React函数组件管理生命周期的一种方式，确保在组件卸载时执行必要的清理操作。",-1),s("h4",{id:"_3-react类组件的生命周期",tabindex:"-1"},[i("3.react类组件的生命周期 "),s("a",{class:"header-anchor",href:"#_3-react类组件的生命周期","aria-label":'Permalink to "3.react类组件的生命周期"'},"​")],-1),s("p",null,"在React类组件中，生命周期可以分为三个阶段：挂载、更新和卸载。以下是React类组件的主要生命周期方法：",-1),s("ol",null,[s("li",null,[s("p",null,[s("strong",null,"挂载阶段"),i("：")]),s("ul",null,[s("li",null,[s("code",null,"constructor(props)"),i(": 组件的构造函数，用于初始化状态和绑定事件处理函数。")]),s("li",null,[s("code",null,"static getDerivedStateFromProps(props, state)"),i(": 从属性中派生状态的静态方法（React 16.3+）。")]),s("li",null,[s("code",null,"render()"),i(": 渲染方法，返回虚拟DOM。")]),s("li",null,[s("code",null,"componentDidMount()"),i(": 组件挂载后调用，通常用于发送网络请求或订阅数据。")])])]),s("li",null,[s("p",null,[s("strong",null,"更新阶段"),i("：")]),s("ul",null,[s("li",null,[s("code",null,"static getDerivedStateFromProps(props, state)"),i(": 更新阶段也可以用来派生状态。")]),s("li",null,[s("code",null,"shouldComponentUpdate(nextProps, nextState)"),i(": 决定是否重新渲染组件，优化性能。")]),s("li",null,[s("code",null,"render()"),i(": 重新渲染组件。")]),s("li",null,[s("code",null,"getSnapshotBeforeUpdate(prevProps, prevState)"),i(": 获取更新前的DOM快照（React 16.3+）。")]),s("li",null,[s("code",null,"componentDidUpdate(prevProps, prevState, snapshot)"),i(": 更新完成后调用，通常用于处理DOM更新之后的操作。")])])]),s("li",null,[s("p",null,[s("strong",null,"卸载阶段"),i("：")]),s("ul",null,[s("li",null,[s("code",null,"componentWillUnmount()"),i(": 组件卸载前调用，通常用于清理操作、取消订阅或定时器等。")])])])],-1),s("p",null,"此外，还有一些生命周期方法在React 16.3之前存在，但在后续版本中已被弃用，不推荐使用：",-1),s("ul",null,[s("li",null,[s("code",null,"componentWillMount()"),i(": 挂载前调用，现在一般用"),s("code",null,"constructor"),i("替代。")]),s("li",null,[s("code",null,"componentWillReceiveProps(nextProps)"),i(": 接收新属性时调用，现在推荐使用"),s("code",null,"getDerivedStateFromProps"),i("。")]),s("li",null,[s("code",null,"componentWillUpdate(nextProps, nextState)"),i(": 更新前调用，现在推荐使用"),s("code",null,"getSnapshotBeforeUpdate"),i("和"),s("code",null,"componentDidUpdate"),i("。")])],-1),s("p",null,[i("需要注意的是，React 16.3之后，生命周期方法的使用方式发生了变化，引入了新的生命周期方法以支持更多的场景。如果你使用React 16.3或更高版本，建议使用新的生命周期方法，如"),s("code",null,"getDerivedStateFromProps"),i("和"),s("code",null,"getSnapshotBeforeUpdate"),i("。")],-1),s("h4",{id:"_4-执行多次事件是如何渲染",tabindex:"-1"},[i("4.执行多次事件是如何渲染 "),s("a",{class:"header-anchor",href:"#_4-执行多次事件是如何渲染","aria-label":'Permalink to "4.执行多次事件是如何渲染"'},"​")],-1),s("p",null,"最终会渲染一次，会进行合并。",-1),s("p",null,[s("code",null,"shouldComponentUpdate"),i(" 是 React 类组件中的一个生命周期方法，用于决定组件是否需要重新渲染，从而可以优化性能。当组件的状态或属性发生变化时，React 会调用 "),s("code",null,"shouldComponentUpdate"),i(" 方法，你可以在这个方法中返回 "),s("code",null,"true"),i(" 或 "),s("code",null,"false"),i(" 来告诉 React 是否继续进行渲染。")],-1),s("p",null,[i("下面是对 "),s("code",null,"shouldComponentUpdate"),i(" 方法的详细讲解：")],-1),s("ol",null,[s("li",null,[s("p",null,[s("strong",null,"作用"),i("：")]),s("ul",null,[s("li",null,[s("code",null,"shouldComponentUpdate(nextProps, nextState)"),i(" 在更新阶段被调用。")]),s("li",null,[i("接收两个参数："),s("code",null,"nextProps"),i(" 表示下一个属性（props），"),s("code",null,"nextState"),i(" 表示下一个状态（state）。")]),s("li",null,"你可以在这个方法中根据新的属性和状态来判断是否需要重新渲染组件。")])]),s("li",null,[s("p",null,[s("strong",null,"返回值"),i("：")]),s("ul",null,[s("li",null,[i("如果 "),s("code",null,"shouldComponentUpdate"),i(" 返回 "),s("code",null,"true"),i("，组件将会重新渲染。")]),s("li",null,[i("如果 "),s("code",null,"shouldComponentUpdate"),i(" 返回 "),s("code",null,"false"),i("，组件将不会重新渲染，以提高性能。")])])]),s("li",null,[s("p",null,[s("strong",null,"使用场景"),i("：")]),s("ul",null,[s("li",null,[i("性能优化："),s("code",null,"shouldComponentUpdate"),i(" 可用于避免不必要的渲染，特别是当你明确知道组件在某些条件下不需要更新时。")]),s("li",null,"深层次属性比较：你可以在这个方法中比较属性或状态的深层次内容，从而减少不必要的渲染。"),s("li",null,[i("避免子组件的渲染：如果你知道子组件也实现了 "),s("code",null,"shouldComponentUpdate"),i("，你可以在父组件中使用它来进一步优化性能。")])])]),s("li",null,[s("p",null,[s("strong",null,"注意事项"),i("：")]),s("ul",null,[s("li",null,[i("调用 "),s("code",null,"shouldComponentUpdate"),i(" 时，不要直接修改组件的状态或属性，这可能导致不稳定的行为。")]),s("li",null,[i("如果你不提供 "),s("code",null,"shouldComponentUpdate"),i(" 方法，React 默认会返回 "),s("code",null,"true"),i("，即每次属性或状态变化都会触发重新渲染。")])])])],-1),s("p",null,"示例代码：",-1),s("div",{class:"language-javascript"},[s("button",{title:"Copy code",class:"copy"}),s("span",{class:"lang"},"javascript"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[s("code",{"v-pre":""},[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"class"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," MyComponent"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," extends"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," React"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"Component"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"  shouldComponentUpdate"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#E36209","--shiki-dark":"#FFAB70"}},"nextProps"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),s("span",{style:{"--shiki-light":"#E36209","--shiki-dark":"#FFAB70"}},"nextState"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"    // 根据条件判断是否需要重新渲染")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"    if"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," ("),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"this"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},".props.someValue "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"==="),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," nextProps.someValue) {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"      return"),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," false"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"; "),s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// 不重新渲染")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"    return"),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," true"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"; "),s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// 重新渲染")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  }")]),i(`
`),s("span",{class:"line"}),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"  render"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"() {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"    // 渲染组件的内容")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  }")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])]),s("button",{class:"collapse"})],-1),s("p",null,[i("使用 "),s("code",null,"shouldComponentUpdate"),i(" 可以帮助你更精细地控制组件的渲染，以减少不必要的性能开销。")],-1),s("p",null,[s("code",null,"shouldComponentUpdate"),i(" 是一个生命周期方法，用于告诉React是否要重新渲染组件。在React 16.3之后，它并没有被废弃，仍然存在，但是在函数组件中不再可用，因为函数组件没有生命周期方法。")],-1),s("p",null,[i("对于类组件，"),s("code",null,"shouldComponentUpdate"),i(" 仍然会被自动调用，以判断是否需要重新渲染组件。这个方法的返回值仍然有效，但不再建议在函数组件中使用。在函数组件中，你可以使用"),s("code",null,"React.memo"),i("或"),s("code",null,"PureComponent"),i("（对类组件而言）来达到类似的性能优化目的。而在函数组件中，你可以使用"),s("code",null,"useMemo"),i("或"),s("code",null,"useCallback"),i("来控制何时重新计算组件的部分内容。")],-1),s("p",null,[i("总之，"),s("code",null,"shouldComponentUpdate"),i(" 仍然是React类组件的一部分，并在适当的情况下使用它可以帮助提高性能，但在函数组件中已经不再适用。")],-1),s("h4",{id:"_5-foreach-map等方法和for循环相比有什么优缺点",tabindex:"-1"},[i("5.foreach/map等方法和for循环相比有什么优缺点 "),s("a",{class:"header-anchor",href:"#_5-foreach-map等方法和for循环相比有什么优缺点","aria-label":'Permalink to "5.foreach/map等方法和for循环相比有什么优缺点"'},"​")],-1),s("p",null,[i("数组的方法循环无法终止单次循环，而for循环可以"),s("code",null,"break"),i("和单次"),s("code",null,"continue"),i("。或者"),s("code",null,"return"),i(". 终止的方法还有 "),s("code",null,"||"),i(),s("code",null,"default"),i(" || "),s("code",null,"setTimeout")],-1),s("div",{class:"language-javascript"},[s("button",{title:"Copy code",class:"copy"}),s("span",{class:"lang"},"javascript"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[s("code",{"v-pre":""},[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"let"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," div "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," document."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"querySelector"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'div'"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"let"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," btn "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," document."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"querySelector"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'btn'"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),i(`
`),s("span",{class:"line"}),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"    function"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"() {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"      console."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"log"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'123'"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),i(`
`),s("span",{class:"line"}),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    dv."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"addEventListener"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'click'"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"function"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()){")]),i(`
`),s("span",{class:"line"}),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),i(`
`),s("span",{class:"line"}),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    btn."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"onclick"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," ="),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," function"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"() {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"      dv."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"removeEventListener"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'click'"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"function"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"() {")]),i(`
`),s("span",{class:"line"}),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"      }")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")])])]),s("button",{class:"collapse"})],-1),s("h4",{id:"_6-purecomponent和component的区别",tabindex:"-1"},[i("6.PureComponent和component的区别 "),s("a",{class:"header-anchor",href:"#_6-purecomponent和component的区别","aria-label":'Permalink to "6.PureComponent和component的区别"'},"​")],-1),s("p",null,[s("code",null,"PureComponent"),i(" 是 React 中的一个优化工具，是 "),s("code",null,"React.Component"),i(" 的一个变种，用于减少组件重新渲染的频率，以提高性能。它在React中自动执行浅比较（shallow comparison）来检测属性和状态的变化，从而避免不必要的渲染。以下是 "),s("code",null,"PureComponent"),i(" 的详细介绍：")],-1),s("ol",null,[s("li",null,[s("p",null,[s("strong",null,"性能优化"),i("：")]),s("ul",null,[s("li",null,[s("code",null,"PureComponent"),i(" 用于性能优化，适用于那些属性和状态变化不频繁的组件。")]),s("li",null,[i("与普通的 "),s("code",null,"React.Component"),i(" 不同，"),s("code",null,"PureComponent"),i(" 在 "),s("code",null,"shouldComponentUpdate"),i(" 中执行浅比较，只有在属性或状态发生实际变化时才重新渲染组件。")])])]),s("li",null,[s("p",null,[s("strong",null,[i("自动实现的 "),s("code",null,"shouldComponentUpdate")]),i("：")]),s("ul",null,[s("li",null,[s("code",null,"PureComponent"),i(" 自动实现了 "),s("code",null,"shouldComponentUpdate"),i(" 方法，无需手动编写。")]),s("li",null,[i("它会对属性（"),s("code",null,"props"),i("）和状态（"),s("code",null,"state"),i("）进行浅比较，以确定是否需要重新渲染组件。")])])]),s("li",null,[s("p",null,[s("strong",null,"浅比较"),i("：")]),s("ul",null,[s("li",null,[i("在浅比较中，"),s("code",null,"PureComponent"),i("会比较属性和状态的引用，而不是其内部内容。")]),s("li",null,[i("这意味着如果属性或状态中的对象引用没有实际变化，"),s("code",null,"PureComponent"),i(" 将认为它们没有改变，从而跳过重新渲染。")])])]),s("li",null,[s("p",null,[s("strong",null,"使用场景"),i("：")]),s("ul",null,[s("li",null,[s("code",null,"PureComponent"),i(" 特别适用于那些具有稳定不变属性和状态的组件，或者属性和状态更新频率较低的组件。")]),s("li",null,[i("避免在 "),s("code",null,"PureComponent"),i(" 中使用可变数据结构，因为浅比较可能会无法检测到数据结构内部的变化。")])])])],-1),s("p",null,"示例代码：",-1),s("div",{class:"language-javascript"},[s("button",{title:"Copy code",class:"copy"}),s("span",{class:"lang"},"javascript"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[s("code",{"v-pre":""},[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," React, { PureComponent } "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"from"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," 'react'"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},";")]),i(`
`),s("span",{class:"line"}),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"class"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," MyPureComponent"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," extends"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," PureComponent"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"  render"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"() {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"    return"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," <"),s("span",{style:{"--shiki-light":"#22863A","--shiki-dark":"#85E89D"}},"div"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},">{"),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"this"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},".props.someData}</"),s("span",{style:{"--shiki-light":"#22863A","--shiki-dark":"#85E89D"}},"div"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},">;")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  }")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])]),s("button",{class:"collapse"})],-1),s("p",null,[i("总之，"),s("code",null,"PureComponent"),i(" 是一个有助于减少不必要的渲染的工具，但在使用时需要注意它的适用场景，确保属性和状态的比较满足浅比较的要求，以获得最佳性能。如果你有不稳定或频繁变化的属性和状态，使用 "),s("code",null,"PureComponent"),i(" 可能不会带来明显的性能提升。")],-1)])),"main-header":l(()=>[a(t.$slots,"main-header")]),"main-header-after":l(()=>[a(t.$slots,"main-header-after")]),"main-nav":l(()=>[a(t.$slots,"main-nav")]),"main-content-before":l(()=>[a(t.$slots,"main-content-before")]),"main-content":l(()=>[a(t.$slots,"main-content")]),"main-content-after":l(()=>[a(t.$slots,"main-content-after")]),"main-nav-before":l(()=>[a(t.$slots,"main-nav-before")]),"main-nav-after":l(()=>[a(t.$slots,"main-nav-after")]),comment:l(()=>[a(t.$slots,"comment")]),footer:l(()=>[a(t.$slots,"footer")]),aside:l(()=>[a(t.$slots,"aside")]),"aside-custom":l(()=>[a(t.$slots,"aside-custom")]),default:l(()=>[a(t.$slots,"default")]),_:3},8,["frontmatter"])}}};export{W as default,f as usePageData};
